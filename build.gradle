plugins {
    id 'java-library'
    id("io.qameta.allure") version "2.12.0"
}

allure {
    report {
        version.set("2.19.0")
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks{
            junit5{
                adapterVersion.set("2.29.1")
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-devtools-v136', version: '4.32.0'
    testImplementation (
            "com.codeborne:selenide:7.9.1",
            "org.junit.jupiter:junit-jupiter:5.9.3",
            "com.github.javafaker:javafaker:1.0.2",
            "commons-io:commons-io:2.19.0",
            'com.google.code.gson:gson:2.13.1',
            "com.opencsv:opencsv:5.11",
            'com.fasterxml.jackson.core:jackson-core:2.15.2',
            'com.fasterxml.jackson.core:jackson-annotations:2.15.2',
            'com.fasterxml.jackson.core:jackson-databind:2.15.2',
            'io.rest-assured:rest-assured:5.3.1',
            "io.qameta.allure:allure-rest-assured:2.29.1",
            "org.projectlombok:lombok:1.18.30",
            'io.qameta.allure:allure-selenide:2.29.1')
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
    
    // Настройки для параллельного запуска тестов
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    systemProperty 'junit.jupiter.execution.parallel.mode.classes.default', 'concurrent'
    systemProperty 'junit.jupiter.execution.parallel.mode.methods.default', 'concurrent'
    systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'fixed'
    systemProperty 'junit.jupiter.execution.parallel.config.fixed.parallelism', '4'
}
task test_run (type: Test) {
    useJUnitPlatform {
        includeTags("Smoke")
    }
}